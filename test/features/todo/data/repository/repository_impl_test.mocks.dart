// Mocks generated by Mockito 5.1.0 from annotations
// in todo_app_tdd_clean_arch/test/features/todo/data/repository/repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app_tdd_clean_arch/core/network_manager/network_manager.dart'
    as _i7;
import 'package:todo_app_tdd_clean_arch/features/todo/data/data_sources/local.dart'
    as _i6;
import 'package:todo_app_tdd_clean_arch/features/todo/data/data_sources/remote.dart'
    as _i3;
import 'package:todo_app_tdd_clean_arch/features/todo/data/models/todo_model.dart'
    as _i5;
import 'package:todo_app_tdd_clean_arch/features/todo/domain/entities/todo.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTodo_0 extends _i1.Fake implements _i2.Todo {}

/// A class which mocks [TodoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRemoteDataSource extends _i1.Mock
    implements _i3.TodoRemoteDataSource {
  MockTodoRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.TodoModel>> getTodos() =>
      (super.noSuchMethod(Invocation.method(#getTodos, []),
              returnValue: Future<List<_i5.TodoModel>>.value(<_i5.TodoModel>[]))
          as _i4.Future<List<_i5.TodoModel>>);
  @override
  _i4.Future<_i2.Todo> createTodo(_i2.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#createTodo, [todo]),
              returnValue: Future<_i2.Todo>.value(_FakeTodo_0()))
          as _i4.Future<_i2.Todo>);
  @override
  _i4.Future<_i2.Todo> deleteTodo(_i2.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#deleteTodo, [todo]),
              returnValue: Future<_i2.Todo>.value(_FakeTodo_0()))
          as _i4.Future<_i2.Todo>);
  @override
  _i4.Future<_i2.Todo> updateTodo(_i2.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#updateTodo, [todo]),
              returnValue: Future<_i2.Todo>.value(_FakeTodo_0()))
          as _i4.Future<_i2.Todo>);
}

/// A class which mocks [TodoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoLocalDataSource extends _i1.Mock
    implements _i6.TodoLocalDataSource {
  MockTodoLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> updateTodo(_i2.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#updateTodo, [todo]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> createTodo(_i2.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#createTodo, [todo]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteTodo(_i2.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#deleteTodo, [todo]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i5.TodoModel>> getTodos() =>
      (super.noSuchMethod(Invocation.method(#getTodos, []),
              returnValue: Future<List<_i5.TodoModel>>.value(<_i5.TodoModel>[]))
          as _i4.Future<List<_i5.TodoModel>>);
  @override
  _i4.Future<void> cacheTodos(List<_i5.TodoModel>? todos) =>
      (super.noSuchMethod(Invocation.method(#cacheTodos, [todos]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i7.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
